@using ClientApp.Models
@using ClientApp.Services
@using ClientApp.Utils
@using ClientApp.Components.SmallComponents
@using ClientApp.Components.SmallComponents.Utility
@using ClientApp.Services.Interfaces
@using ClientApp.Services.ServiceModels
@inject IItemService<ProbationProject> ProjectService
@inject IItemService<Intern> InternService

<div class="modal fade show" id="staticBackdrop" style="display: @(IsVisible ? "block" : "none")" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
     aria-labelledby="staticBackdropLabel" aria-modal="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                @if (ExistingProject is not null)
                {
                    <h1 class="modal-title fs-5">Редактирование проекта</h1>
                }
                else
                {
                    <h1 class="modal-title fs-5">Добавление проекта</h1>
                }
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="Hide"></button>
            </div>

            <div class="modal-body">
                <form class="container g-3 needs-validation" novalidate>
                    <div class="row mb-3">
                        <label for="titleInput" class="form-label">Название <span class="text-danger">*</span></label>
                        <input @bind="_titleInputValue"
                               class="form-control @ValidationHelper.ValidateStringNullOrWhitespace(_titleInputValue, _isShouldValidate)"
                               id="titleInput" placeholder="Разработка ..." required>
                        <div class="invalid-feedback">
                            Пожалуйста, укажите название проекта.
                        </div>
                    </div>

                    <div class="row mb-3">
                        <label for="descriptionInput" class="form-label">Описание <span class="text-danger">*</span></label>
                        <textarea class="form-control" id="descriptionInput" rows="6" 
                            @bind="_descriptionInputValue" placeholder="Описание проекта"></textarea>
                    </div>
                    <div class="row mb-3">
                        <label for="dateInput" class="form-label">Дата начала <span class="text-danger">*</span></label>
                        <input type="date" class="form-control @ValidationHelper.ValidateDateBiggerThan(_startDateInputValue,
                                                                   new DateTime(1900, 1, 1))"
                               id="dateInput" placeholder="01.01.2025" @bind="_startDateInputValue">
                        <div class="invalid-feedback">
                            Пожалуйста, укажите корректную дату начала.
                        </div>
                    </div>
                    <div class="row mb-3">
                        <MultiDropDown Items="_allInternsDdValues" @ref="_multiDdInterns" Title="Стажеры"
                                       CustomToStringFormat="s => s.Value.FullName" />
                    </div>
                </form>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-outline-danger" @onclick="Hide">Отмена</button>
                <button type="button" class="btn btn-primary" @onclick="SaveInfo">Сохранить</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] 
    public Func<ProbationProject, Task>? OnSaveAction { get; set; }
    
    private MultiDropDown<Intern> _multiDdInterns = null!;
    private List<DropdownValue<Intern>> _allInternsDdValues = [];
    private bool _isShouldValidate;
    
    private string _titleInputValue = "";
    private string _descriptionInputValue = "";
    private DateTime _startDateInputValue = DateTime.Today;

    public ProbationProject? ExistingProject { get; set; }
    public bool IsVisible { get; private set; }
    
    protected override async Task OnInitializedAsync()
    {
        var response = await InternService.GetAllAsync();

        _allInternsDdValues = response.Item?.Select(i => new DropdownValue<Intern>
        {
            Value = i,
            UniqueId = Guid.NewGuid()
        }).ToList() ?? [];
    }
    
    private async Task SaveInfo()
    {
        _isShouldValidate = true;
        if (string.IsNullOrWhiteSpace(_titleInputValue))
        {
            return;
        }

        var model = ExistingProject ?? new ProbationProject();
        model.Title = _titleInputValue;
        model.Description = _descriptionInputValue;
        model.StartDate = _startDateInputValue;
        model.Interns = _multiDdInterns.SelectedItems.Select(dv => dv.Value).ToList();
        ServiceActionResult<ProbationProject> result;
        if (ExistingProject == null)
        {
            result = await ProjectService.CreateAsync(model);
        }
        else
        {
            result = await ProjectService.SaveAsync(model);
        }
        
        if (result.Completed)
        {
            ExistingProject = result.Item;
            Hide();
            OnSaveAction?.Invoke(result.Item!);
        }
    }

    public async Task ShowAsync(ProbationProject? course = null)
    {
        _isShouldValidate = false;
        ExistingProject = course;
        _titleInputValue = course?.Title ?? "";
        _descriptionInputValue = course?.Description ?? "";
        _startDateInputValue = course?.StartDate ?? DateTime.Today;
        if (course != null && course.Interns != null)
        {
            await _multiDdInterns.SelectItemsRangeAsync(_allInternsDdValues.Where(dv => course.Interns.Select(i => i.Id).Contains(dv.Value.Id)).ToArray());
        }
        else
        {
            await _multiDdInterns.ClearSelectionAsync();
        }
        IsVisible = true;
        StateHasChanged();
    }

    public void Hide()
    {
        IsVisible = false;
        StateHasChanged();
    }
}